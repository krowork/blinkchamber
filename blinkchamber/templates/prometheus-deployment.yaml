{{- if .Values.prometheus.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "blinkchamber.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: prometheus
  template:
    metadata:
      labels:
        {{- include "blinkchamber.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: prometheus
    spec:
      serviceAccountName: {{ include "blinkchamber.fullname" . }}-prometheus-sa
      initContainers:
        - name: wait-vault-secrets
          image: busybox:1.35
          command:
            - 'sh'
            - '-c'
            - 'while [ ! -f /vault/secrets/prometheus_admin_password ]; do echo "Waiting for Vault secrets..."; sleep 2; done; echo "Vault secrets ready"'
          volumeMounts:
            - name: vault-secrets
              mountPath: /vault/secrets
      containers:
        - name: prometheus
          image: prom/prometheus:v2.47.0
          ports:
            - containerPort: 9090
              name: http
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
          env:
            - name: PROMETHEUS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-secrets
                  key: prometheus_admin_password
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
            - name: vault-secrets
              mountPath: /vault/secrets
              readOnly: true
          resources:
            {{- toYaml .Values.prometheus.server.resources | nindent 12 }}
        - name: vault-agent
          image: hashicorp/vault:1.15.2
          args:
            - "agent"
            - "-config=/vault/config/agent-config.hcl"
          env:
            - name: VAULT_ADDR
              value: "http://{{ include "blinkchamber.fullname" . }}-vault:8200"
          volumeMounts:
            - name: vault-secrets
              mountPath: /vault/secrets
            - name: vault-agent-config
              mountPath: /vault/config
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
      volumes:
        - name: prometheus-config
          configMap:
            name: {{ include "blinkchamber.fullname" . }}-prometheus-config
        - name: prometheus-storage
          {{- if .Values.prometheus.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "blinkchamber.fullname" . }}-prometheus-pvc
          {{- else }}
          emptyDir:
            sizeLimit: {{ .Values.prometheus.server.persistentVolume.size }}
          {{- end }}
        - name: vault-secrets
          emptyDir:
            medium: Memory
        - name: vault-agent-config
          configMap:
            name: {{ include "blinkchamber.fullname" . }}-prometheus-vault-agent-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-vault-agent-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
data:
  agent-config.hcl: |
    exit_after_auth = false
    pid_file = "/tmp/vault-agent-pid"

    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "prometheus-role"
        }
      }
      sink "file" {
        config = {
          path = "/vault/secrets/vault-token"
        }
      }
    }

    template {
      source      = "/vault/config/prometheus-admin.tpl"
      destination = "/vault/secrets/prometheus_admin_password"
    }

    vault {
      address = "http://{{ include "blinkchamber.fullname" . }}-vault:8200"
    }

  prometheus-admin.tpl: |
    {{`{{ with secret "secret/monitoring/prometheus" }}`}}
    {{`{{ .Data.data.admin_password }}`}}
    {{`{{ end }}`}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-sa
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-role
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-rolebinding
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "blinkchamber.fullname" . }}-prometheus-role
subjects:
- kind: ServiceAccount
  name: {{ include "blinkchamber.fullname" . }}-prometheus-sa
  namespace: {{ .Release.Namespace }}
{{- if .Values.prometheus.server.persistentVolume.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus-pvc
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: {{ .Values.prometheus.server.persistentVolume.size }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
spec:
  selector:
    {{- include "blinkchamber.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
  ports:
  - name: http
    port: 9090
    targetPort: 9090
  type: ClusterIP
{{- if .Values.prometheus.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "blinkchamber.fullname" . }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "blinkchamber.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
  {{- with .Values.global.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.global.ingress.className }}
  ingressClassName: {{ .Values.global.ingress.className }}
  {{- end }}
  {{- if .Values.global.tls.enabled }}
  tls:
  {{- range .Values.prometheus.ingress.tls }}
    - hosts:
    {{- range .hosts }}
      - {{ . | quote }}
    {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
  {{- end }}
  rules:
  {{- range .Values.prometheus.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
        {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ include "blinkchamber.fullname" $ }}-prometheus
                port:
                  number: 9090
        {{- end }}
  {{- end }}
{{- end }}
{{- end }}