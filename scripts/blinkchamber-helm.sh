#!/bin/bash

# scripts/blinkchamber-helm.sh - Script de gesti√≥n para Helm chart de blinkchamber

set -e

# Cargar bibliotecas
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
source "$PROJECT_ROOT/scripts/lib/common.sh"
source "$PROJECT_ROOT/scripts/lib/k8s.sh"

# Verbose helpers
verbose() {
    if [[ "${VERBOSE:-false}" == "true" || "${DEBUG:-false}" == "true" ]]; then
        echo -e "[VERBOSE] $@"
    fi
}

verbose_env() {
    if [[ "${VERBOSE:-false}" == "true" || "${DEBUG:-false}" == "true" ]]; then
        echo "[VERBOSE] Variables de entorno relevantes:"
        echo "  RELEASE_NAME=$RELEASE_NAME"
        echo "  NAMESPACE=$NAMESPACE"
        echo "  HELM_CHART_DIR=$HELM_CHART_DIR"
        echo "  VERBOSE=${VERBOSE:-false}"
        echo "  DEBUG=${DEBUG:-false}"
        echo "  DRY_RUN=${DRY_RUN:-false}"
    fi
}

# Ejecuta un comando mostrando el comando, su salida y errores
verbose_run() {
    local cmd="$1"
    local desc="$2"
    echo -e "\n=============================="
    echo -e "üîπ Ejecutando: $desc"
    echo -e "üîπ Comando: $cmd"
    echo -e "=============================="
    verbose_env
    
    # Ejecutar el comando y capturar tanto stdout como stderr
    echo -e "\n--- Ejecutando comando ---"
    local output
    local error_output
    
    # Ejecutar el comando y capturar la salida
    if output=$(eval "$cmd" 2>&1); then
        local status=0
    else
        local status=$?
    fi
    
    echo -e "\n--- Salida completa del comando ---"
    echo "$output"
    echo -e "--- Fin de la salida ---\n"
    
    if [[ $status -ne 0 ]]; then
        echo -e "‚ùå Error ejecutando: $desc (c√≥digo $status)"
        echo -e "‚ùå Comando que fall√≥: $cmd"
        echo -e "‚ùå Salida del error:"
        echo "$output"
        echo -e "\nüîç Sugerencias de debug:"
        echo -e "   - Verifica que el comando sea v√°lido"
        echo -e "   - Revisa los permisos y configuraci√≥n"
        echo -e "   - Ejecuta el comando manualmente para m√°s detalles"
        return $status
    else
        echo -e "‚úÖ Comando ejecutado correctamente: $desc"
    fi
    echo -e "==============================\n"
}

# Variables espec√≠ficas del script
HELM_CHART_DIR="$PROJECT_ROOT/blinkchamber"
RELEASE_NAME="blinkchamber"
NAMESPACE="blinkchamber"

# Funci√≥n para mostrar ayuda espec√≠fica
show_helm_help() {
    cat << EOF
üöÄ blinkchamber-helm - Gesti√≥n del Helm chart de blinkchamber

Uso: $0 [comando] [opciones]

Comandos:
  install     Instalar el chart de blinkchamber
  upgrade     Actualizar el chart de blinkchamber
  uninstall   Desinstalar el chart de blinkchamber
  status      Mostrar estado del release
  values      Mostrar valores actuales
  lint        Validar el chart
  template    Generar templates sin instalar
  test        Ejecutar tests del chart
  port-forward Configurar port-forwarding
  logs        Mostrar logs de componentes
  debug       Modo debug para troubleshooting
  cleanup     Limpiar recursos hu√©rfanos

Opciones de install/upgrade:
  --values FILE     Archivo de valores personalizado
  --set KEY=VAL     Establecer valor espec√≠fico
  --dry-run         Simular sin ejecutar
  --wait            Esperar a que los recursos est√©n listos
  --timeout DUR     Timeout para la operaci√≥n (default: 10m)

Opciones de port-forward:
  --all             Configurar todos los port-forwards
  --vault           Solo Vault (puerto 8200)
  --zitadel         Solo Zitadel (puerto 8080)
  --mailu           Solo Mailu (puerto 8025)
  --grafana         Solo Grafana (puerto 3000)
  --prometheus      Solo Prometheus (puerto 9090)

Opciones de logs:
  --component NAME  Mostrar logs de componente espec√≠fico
  --follow          Seguir logs en tiempo real
  --lines N         N√∫mero de l√≠neas a mostrar

Variables de entorno:
  RELEASE_NAME=name     Nombre del release (default: blinkchamber)
  NAMESPACE=ns          Namespace (default: blinkchamber)
  VERBOSE=true          Modo verbose
  DEBUG=true            Modo debug
  DRY_RUN=true          Simular sin ejecutar

Ejemplos:
  $0 install --wait                    # Instalar y esperar
  $0 install --values custom.yaml      # Instalar con valores personalizados
  $0 upgrade --set global.domain=test.local  # Actualizar con valor espec√≠fico
  $0 status                            # Estado del release
  $0 port-forward --all                # Configurar todos los port-forwards
  $0 logs --component vault --follow   # Logs de Vault en tiempo real
  $0 uninstall                         # Desinstalar release

Para m√°s informaci√≥n, consulta la documentaci√≥n en blinkchamber/README.md

EOF
}

# Funci√≥n para verificar prerrequisitos
check_helm_prerequisites() {
    echo -e "\n=============================="
    echo "üîç [INICIO] Verificando prerrequisitos..."
    echo "=============================="
    verbose_env
    
    # Verificar Helm
    echo "üîπ Verificando Helm..."
    if ! command -v helm &> /dev/null; then
        echo "‚ùå Helm no est√° instalado"
        echo "‚ùå Instala Helm: https://helm.sh/docs/intro/install/"
        return 1
    else
        echo "‚úÖ Helm encontrado: $(helm version --short)"
    fi
    
    # Verificar kubectl
    echo "üîπ Verificando kubectl..."
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl no est√° instalado"
        echo "‚ùå Instala kubectl: https://kubernetes.io/docs/tasks/tools/"
        return 1
    else
        echo "‚úÖ kubectl encontrado: $(kubectl version --client | head -n1)"
    fi
    
    # Verificar conexi√≥n al cluster
    echo "üîπ Verificando conexi√≥n al cluster..."
    verbose_run "kubectl cluster-info" "Verificar conexi√≥n al cluster"
    
    # Verificar que el chart existe
    echo "üîπ Verificando directorio del chart..."
    if [[ ! -d "$HELM_CHART_DIR" ]]; then
        echo "‚ùå Directorio del chart no encontrado: $HELM_CHART_DIR"
        return 1
    else
        echo "‚úÖ Directorio del chart encontrado: $HELM_CHART_DIR"
    fi
    
    # Verificar Chart.yaml
    echo "üîπ Verificando Chart.yaml..."
    if [[ ! -f "$HELM_CHART_DIR/Chart.yaml" ]]; then
        echo "‚ùå Chart.yaml no encontrado en: $HELM_CHART_DIR"
        return 1
    else
        echo "‚úÖ Chart.yaml encontrado"
    fi
    
    echo "‚úÖ Prerrequisitos verificados"
    echo -e "=============================="
    echo "üîç [FIN] Verificaci√≥n de prerrequisitos"
    echo "==============================\n"
}

# Funci√≥n para agregar repositorios
add_helm_repos() {
    echo -e "\n=============================="
    echo "üì¶ [INICIO] Agregando repositorios de Helm..."
    echo "=============================="
    verbose_env
    
    # Mostrar repositorios actuales
    echo "üîπ Repositorios actuales:"
    verbose_run "helm repo list" "Listar repositorios actuales"
    
    # HashiCorp (Vault)
    echo "üîπ Verificando repositorio HashiCorp..."
    if ! helm repo list | grep -q "hashicorp"; then
        verbose_run "helm repo add hashicorp https://helm.releases.hashicorp.com" "Agregar repo HashiCorp"
    else
        echo "‚úÖ Repositorio HashiCorp ya existe"
    fi
    
    # Bitnami (PostgreSQL)
    echo "üîπ Verificando repositorio Bitnami..."
    if ! helm repo list | grep -q "bitnami"; then
        verbose_run "helm repo add bitnami https://charts.bitnami.com/bitnami" "Agregar repo Bitnami"
    else
        echo "‚úÖ Repositorio Bitnami ya existe"
    fi
    
    # Prometheus Community
    echo "üîπ Verificando repositorio Prometheus..."
    if ! helm repo list | grep -q "prometheus-community"; then
        verbose_run "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts" "Agregar repo Prometheus"
    else
        echo "‚úÖ Repositorio Prometheus ya existe"
    fi
    
    # Grafana
    echo "üîπ Verificando repositorio Grafana..."
    if ! helm repo list | grep -q "grafana"; then
        verbose_run "helm repo add grafana https://grafana.github.io/helm-charts" "Agregar repo Grafana"
    else
        echo "‚úÖ Repositorio Grafana ya existe"
    fi
    
    # Actualizar repositorios
    echo "üîπ Actualizando repositorios..."
    verbose_run "helm repo update" "Actualizar repositorios"
    
    # Mostrar repositorios finales
    echo "üîπ Repositorios finales:"
    verbose_run "helm repo list" "Listar repositorios finales"
    
    echo "‚úÖ Repositorios configurados"
    echo -e "=============================="
    echo "üì¶ [FIN] Configuraci√≥n de repositorios"
    echo "==============================\n"
}

# Funci√≥n para instalar el chart
install_chart() {
    local values_file=$1
    local dry_run=${2:-false}
    local wait=${3:-false}
    local timeout=${4:-"10m"}
    
    echo -e "\n=============================="
    echo "üöÄ [INICIO] Instalando chart de blinkchamber"
    echo "=============================="
    verbose_env
    
    # Verificar prerrequisitos
    check_helm_prerequisites || exit 1
    
    # Agregar repositorios
    add_helm_repos
    
    # Construir comando de instalaci√≥n
    local helm_cmd="helm install $RELEASE_NAME $HELM_CHART_DIR -n $NAMESPACE --create-namespace"
    
    # Agregar opciones
    if [[ -n "$values_file" ]]; then
        helm_cmd="$helm_cmd -f $values_file"
    fi
    
    if [[ "$wait" == "true" ]]; then
        helm_cmd="$helm_cmd --wait --timeout $timeout"
    fi
    
    if [[ "$dry_run" == "true" ]]; then
        helm_cmd="$helm_cmd --dry-run --debug"
    fi
    
    # Validar chart antes de instalar
    echo "üîπ Validando chart antes de la instalaci√≥n..."
    verbose_run "helm lint $HELM_CHART_DIR" "Validar sintaxis del chart" || {
        echo "‚ùå Error en la validaci√≥n del chart. Corrige los errores antes de continuar."
        return 1
    }
    
    # Probar template generation
    echo "üîπ Probando generaci√≥n de templates..."
    verbose_run "helm template $RELEASE_NAME $HELM_CHART_DIR -n $NAMESPACE" "Generar templates de prueba" || {
        echo "‚ùå Error en la generaci√≥n de templates. Revisa la configuraci√≥n del chart."
        return 1
    }
    
    # Ejecutar instalaci√≥n
    if [[ "${DRY_RUN:-false}" != "true" ]]; then
        echo "üîπ Iniciando instalaci√≥n del chart..."
        verbose_run "$helm_cmd" "Instalar chart" || {
            echo "‚ùå Error durante la instalaci√≥n del chart."
            echo "üîç Verificando estado del namespace..."
            verbose_run "kubectl get all -n $NAMESPACE" "Verificar recursos en namespace"
            return 1
        }
        
        if [[ "$wait" == "true" ]]; then
            echo "‚úÖ Chart instalado exitosamente"
            show_post_install_info
        else
            echo "‚úÖ Chart instalado (ejecutando en background)"
        fi
    else
        echo "[DRY-RUN] Comando que se ejecutar√≠a:"
        echo "$helm_cmd"
    fi
    echo -e "=============================="
    echo "üöÄ [FIN] Instalaci√≥n chart de blinkchamber"
    echo "==============================\n"
}

# Funci√≥n para actualizar el chart
upgrade_chart() {
    local values_file=$1
    local dry_run=${2:-false}
    local wait=${3:-false}
    local timeout=${4:-"10m"}
    
    echo -e "\n=============================="
    echo "üîÑ [INICIO] Actualizando chart de blinkchamber"
    echo "=============================="
    verbose_env
    
    # Verificar que el release existe
    echo "üîπ Verificando existencia del release..."
    verbose_run "helm list -n $NAMESPACE" "Listar releases en namespace"
    
    if ! helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; then
        echo "‚ùå Release '$RELEASE_NAME' no encontrado en namespace '$NAMESPACE'"
        echo "‚ùå Ejecuta 'install' primero"
        return 1
    else
        echo "‚úÖ Release '$RELEASE_NAME' encontrado"
    fi
    
    # Construir comando de actualizaci√≥n
    local helm_cmd="helm upgrade $RELEASE_NAME $HELM_CHART_DIR -n $NAMESPACE"
    
    # Agregar opciones
    if [[ -n "$values_file" ]]; then
        helm_cmd="$helm_cmd -f $values_file"
        echo "üîπ Usando archivo de valores: $values_file"
    fi
    
    if [[ "$wait" == "true" ]]; then
        helm_cmd="$helm_cmd --wait --timeout $timeout"
        echo "üîπ Modo wait activado con timeout: $timeout"
    fi
    
    if [[ "$dry_run" == "true" ]]; then
        helm_cmd="$helm_cmd --dry-run --debug"
        echo "üîπ Modo dry-run activado"
    fi
    
    echo "üîπ Comando de actualizaci√≥n: $helm_cmd"
    
    # Ejecutar actualizaci√≥n
    if [[ "${DRY_RUN:-false}" != "true" ]]; then
        verbose_run "$helm_cmd" "Actualizar chart"
        
        if [[ "$wait" == "true" ]]; then
            echo "‚úÖ Chart actualizado exitosamente"
        else
            echo "‚úÖ Chart actualizado (ejecutando en background)"
        fi
    else
        echo "[DRY-RUN] Comando que se ejecutar√≠a:"
        echo "$helm_cmd"
    fi
    
    echo -e "=============================="
    echo "üîÑ [FIN] Actualizaci√≥n chart de blinkchamber"
    echo "==============================\n"
}

# Funci√≥n para desinstalar el chart
uninstall_chart() {
    local dry_run=${1:-false}
    
    echo -e "\n=============================="
    echo "üßπ [INICIO] Desinstalando chart de blinkchamber"
    echo "=============================="
    verbose_env
    
    # Verificar que el release existe
    echo "üîπ Verificando existencia del release..."
    verbose_run "helm list -n $NAMESPACE" "Listar releases en namespace"
    
    if ! helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; then
        echo "‚ö†Ô∏è Release '$RELEASE_NAME' no encontrado en namespace '$NAMESPACE'"
        echo "‚ö†Ô∏è No hay nada que desinstalar"
        return 0
    else
        echo "‚úÖ Release '$RELEASE_NAME' encontrado, procediendo con desinstalaci√≥n"
    fi
    
    local helm_cmd="helm uninstall $RELEASE_NAME -n $NAMESPACE"
    
    if [[ "$dry_run" == "true" ]]; then
        helm_cmd="$helm_cmd --dry-run"
        echo "üîπ Modo dry-run activado"
    fi
    
    echo "üîπ Comando de desinstalaci√≥n: $helm_cmd"
    
    if [[ "${DRY_RUN:-false}" != "true" ]]; then
        verbose_run "$helm_cmd" "Desinstalar chart"
        echo "‚úÖ Chart desinstalado exitosamente"
    else
        echo "[DRY-RUN] Comando que se ejecutar√≠a:"
        echo "$helm_cmd"
    fi
    
    echo -e "=============================="
    echo "üßπ [FIN] Desinstalaci√≥n chart de blinkchamber"
    echo "==============================\n"
}

# Funci√≥n para mostrar estado del release
show_release_status() {
    echo -e "\n=============================="
    echo "üìä [INICIO] Estado del release blinkchamber"
    echo "=============================="
    verbose_env
    
    # Verificar que el release existe
    echo "üîπ Verificando existencia del release..."
    verbose_run "helm list -n $NAMESPACE" "Listar releases en namespace"
    
    if ! helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; then
        echo "‚ùå Release '$RELEASE_NAME' no encontrado en namespace '$NAMESPACE'"
        return 1
    else
        echo "‚úÖ Release '$RELEASE_NAME' encontrado"
    fi
    
    # Mostrar estado del release
    echo ""
    echo "üîπ Estado detallado del release:"
    verbose_run "helm status $RELEASE_NAME -n $NAMESPACE" "Mostrar estado del release"
    
    # Mostrar recursos
    echo ""
    echo "üîπ Recursos del release:"
    verbose_run "kubectl get all -n $NAMESPACE -l app.kubernetes.io/instance=$RELEASE_NAME" "Listar recursos del release"
    
    # Mostrar PVCs
    echo ""
    echo "üîπ Persistent Volume Claims:"
    verbose_run "kubectl get pvc -n $NAMESPACE -l app.kubernetes.io/instance=$RELEASE_NAME" "Listar PVCs del release"
    
    # Mostrar Ingress
    echo ""
    echo "üîπ Ingress:"
    verbose_run "kubectl get ingress -n $NAMESPACE -l app.kubernetes.io/instance=$RELEASE_NAME" "Listar Ingress del release"
    
    # Mostrar Services
    echo ""
    echo "üîπ Services:"
    verbose_run "kubectl get services -n $NAMESPACE -l app.kubernetes.io/instance=$RELEASE_NAME" "Listar Services del release"
    
    echo -e "=============================="
    echo "üìä [FIN] Estado del release blinkchamber"
    echo "==============================\n"
}

# Funci√≥n para mostrar valores actuales
show_current_values() {
    echo -e "\n=============================="
    echo "üìã [INICIO] Valores actuales del release"
    echo "=============================="
    verbose_env
    
    # Verificar que el release existe
    echo "üîπ Verificando existencia del release..."
    verbose_run "helm list -n $NAMESPACE" "Listar releases en namespace"
    
    if ! helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; then
        echo "‚ùå Release '$RELEASE_NAME' no encontrado en namespace '$NAMESPACE'"
        return 1
    else
        echo "‚úÖ Release '$RELEASE_NAME' encontrado"
    fi
    
    echo "üîπ Valores actuales del release:"
    verbose_run "helm get values $RELEASE_NAME -n $NAMESPACE" "Mostrar valores del release"
    
    echo -e "=============================="
    echo "üìã [FIN] Valores actuales del release"
    echo "==============================\n"
}

# Funci√≥n para validar el chart
lint_chart() {
    echo -e "\n=============================="
    echo "üîç [INICIO] Validando chart de blinkchamber"
    echo "=============================="
    verbose_env
    
    if [[ ! -d "$HELM_CHART_DIR" ]]; then
        echo "‚ùå Directorio del chart no encontrado: $HELM_CHART_DIR"
        return 1
    else
        echo "‚úÖ Directorio del chart encontrado: $HELM_CHART_DIR"
    fi
    
    echo "üîπ Contenido del directorio del chart:"
    verbose_run "ls -la $HELM_CHART_DIR" "Listar contenido del directorio del chart"
    
    echo "üîπ Validando chart con Helm lint:"
    verbose_run "helm lint $HELM_CHART_DIR" "Validar chart"
    
    echo "‚úÖ Chart validado exitosamente"
    echo -e "=============================="
    echo "üîç [FIN] Validaci√≥n del chart"
    echo "==============================\n"
}

# Funci√≥n para generar templates
template_chart() {
    local values_file=$1
    
    echo -e "\n=============================="
    echo "üìÑ [INICIO] Generando templates del chart"
    echo "=============================="
    verbose_env
    
    local helm_cmd="helm template $RELEASE_NAME $HELM_CHART_DIR -n $NAMESPACE"
    
    if [[ -n "$values_file" ]]; then
        helm_cmd="$helm_cmd -f $values_file"
        echo "üîπ Usando archivo de valores: $values_file"
    else
        echo "üîπ Usando valores por defecto"
    fi
    
    echo "üîπ Comando de template: $helm_cmd"
    
    verbose_run "$helm_cmd" "Generar templates"
    
    echo -e "=============================="
    echo "üìÑ [FIN] Generaci√≥n de templates"
    echo "==============================\n"
}

# Funci√≥n para configurar port-forwarding
setup_helm_port_forwarding() {
    local service_type=$1
    
    echo -e "\n=============================="
    echo "üîó [INICIO] Configurando port-forwarding"
    echo "=============================="
    verbose_env
    
    echo "üîπ Tipo de servicio: $service_type"
    
    case "$service_type" in
        all)
            echo "üîπ Configurando todos los port-forwards..."
            setup_port_forward "vault" "$NAMESPACE" 8200 8200 true
            setup_port_forward "zitadel" "$NAMESPACE" 8080 8080 true
            setup_port_forward "mailu" "$NAMESPACE" 80 80 true
            setup_port_forward "grafana" "$NAMESPACE" 3000 3000 true
            setup_port_forward "prometheus" "$NAMESPACE" 9090 9090 true
            ;;
        vault)
            echo "üîπ Configurando port-forward para Vault..."
            setup_port_forward "vault" "$NAMESPACE" 8200 8200 false
            ;;
        zitadel)
            echo "üîπ Configurando port-forward para Zitadel..."
            setup_port_forward "zitadel" "$NAMESPACE" 8080 8080 false
            ;;
        mailu)
            echo "üîπ Configurando port-forward para Mailu..."
            setup_port_forward "mailu" "$NAMESPACE" 80 80 false
            ;;
        grafana)
            echo "üîπ Configurando port-forward para Grafana..."
            setup_port_forward "grafana" "$NAMESPACE" 3000 3000 false
            ;;
        prometheus)
            echo "üîπ Configurando port-forward para Prometheus..."
            setup_port_forward "prometheus" "$NAMESPACE" 9090 9090 false
            ;;
        *)
            echo "‚ùå Servicio no reconocido: $service_type"
            echo "‚ùå Servicios disponibles: all, vault, zitadel, mailu, grafana, prometheus"
            return 1
            ;;
    esac
    
    echo -e "=============================="
    echo "üîó [FIN] Configuraci√≥n de port-forwarding"
    echo "==============================\n"
}

# Funci√≥n para mostrar logs
show_helm_logs() {
    local component=$1
    local follow=${2:-false}
    local lines=${3:-50}
    
    echo -e "\n=============================="
    echo "üìã [INICIO] Mostrando logs de componente"
    echo "=============================="
    verbose_env
    
    if [[ -z "$component" ]]; then
        echo "‚ùå Componente no especificado"
        return 1
    fi
    
    echo "üîπ Componente: $component"
    echo "üîπ Modo follow: $follow"
    echo "üîπ N√∫mero de l√≠neas: $lines"
    
    # Verificar que el deployment existe
    echo "üîπ Verificando existencia del deployment..."
    verbose_run "kubectl get deployments -n $NAMESPACE -l app.kubernetes.io/instance=$RELEASE_NAME" "Listar deployments del release"
    
    case "$component" in
        vault)
            echo "üîπ Mostrando logs de Vault..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-vault -n $NAMESPACE --tail=$lines" "Logs de Vault (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-vault -n $NAMESPACE --tail=$lines" "Logs de Vault"
            fi
            ;;
        zitadel)
            echo "üîπ Mostrando logs de Zitadel..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-zitadel -n $NAMESPACE --tail=$lines" "Logs de Zitadel (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-zitadel -n $NAMESPACE --tail=$lines" "Logs de Zitadel"
            fi
            ;;
        postgresql)
            echo "üîπ Mostrando logs de PostgreSQL..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-postgresql -n $NAMESPACE --tail=$lines" "Logs de PostgreSQL (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-postgresql -n $NAMESPACE --tail=$lines" "Logs de PostgreSQL"
            fi
            ;;
        mailu)
            echo "üîπ Mostrando logs de Mailu..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-mailu -n $NAMESPACE --tail=$lines" "Logs de Mailu (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-mailu -n $NAMESPACE --tail=$lines" "Logs de Mailu"
            fi
            ;;
        grafana)
            echo "üîπ Mostrando logs de Grafana..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-grafana -n $NAMESPACE --tail=$lines" "Logs de Grafana (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-grafana -n $NAMESPACE --tail=$lines" "Logs de Grafana"
            fi
            ;;
        prometheus)
            echo "üîπ Mostrando logs de Prometheus..."
            if [[ "$follow" == "true" ]]; then
                verbose_run "kubectl logs -f deployment/$RELEASE_NAME-prometheus -n $NAMESPACE --tail=$lines" "Logs de Prometheus (follow)"
            else
                verbose_run "kubectl logs deployment/$RELEASE_NAME-prometheus -n $NAMESPACE --tail=$lines" "Logs de Prometheus"
            fi
            ;;
        *)
            echo "‚ùå Componente no reconocido: $component"
            echo "‚ùå Componentes disponibles: vault, zitadel, postgresql, mailu, grafana, prometheus"
            return 1
            ;;
    esac
    
    echo -e "=============================="
    echo "üìã [FIN] Logs de componente"
    echo "==============================\n"
}

# Funci√≥n para mostrar informaci√≥n post-instalaci√≥n
show_post_install_info() {
    cat << EOF

üéâ ¬°Chart instalado exitosamente!

üìã Pr√≥ximos pasos:
==================

1. üîó Configurar port-forwards:
   $0 port-forward --all

2. üåê Acceder a los servicios:
   - Vault: http://localhost:8200
   - Zitadel: http://localhost:8080
   - Mailu: http://localhost:80
   - Grafana: http://localhost:3000
   - Prometheus: http://localhost:9090

3. üîß Configuraci√≥n adicional:
   - Configurar DNS local (/etc/hosts)
   - Verificar certificados TLS
   - Configurar Vault si es necesario

4. üìä Verificar estado:
   $0 status

5. üìã Ver logs:
   $0 logs --component vault --follow

Para m√°s informaci√≥n: $0 --help

EOF
}

# Funci√≥n para limpiar recursos hu√©rfanos
cleanup_orphaned_resources() {
    echo -e "\n=============================="
    echo "üßπ [INICIO] Limpiando recursos hu√©rfanos"
    echo "=============================="
    verbose_env
    
    echo "üîπ Verificando recursos en namespace $NAMESPACE..."
    verbose_run "kubectl get all -n $NAMESPACE" "Listar todos los recursos"
    
    echo "üîπ Verificando PVCs hu√©rfanos..."
    verbose_run "kubectl get pvc -n $NAMESPACE" "Listar PVCs"
    
    echo "üîπ Verificando configmaps hu√©rfanos..."
    verbose_run "kubectl get configmaps -n $NAMESPACE" "Listar ConfigMaps"
    
    echo "üîπ Verificando secrets hu√©rfanos..."
    verbose_run "kubectl get secrets -n $NAMESPACE" "Listar Secrets"
    
    echo -e "=============================="
    echo "üßπ [FIN] Limpieza de recursos hu√©rfanos"
    echo "==============================\n"
}

# Funci√≥n para modo debug
debug_mode() {
    echo -e "\n=============================="
    echo "üêõ [INICIO] Modo debug para troubleshooting"
    echo "=============================="
    verbose_env
    
    echo "üîπ Informaci√≥n del sistema:"
    verbose_run "uname -a" "Informaci√≥n del sistema operativo"
    
    echo "üîπ Versiones de herramientas:"
    verbose_run "helm version" "Versi√≥n de Helm"
    verbose_run "kubectl version --client" "Versi√≥n de kubectl"
    
    echo "üîπ Estado del cluster:"
    verbose_run "kubectl cluster-info" "Informaci√≥n del cluster"
    verbose_run "kubectl get nodes" "Nodos del cluster"
    
    echo "üîπ Namespaces existentes:"
    verbose_run "kubectl get namespaces" "Listar namespaces"
    
    echo "üîπ Estado del namespace blinkchamber:"
    verbose_run "kubectl get all -n blinkchamber" "Recursos en namespace blinkchamber"
    
    echo "üîπ Releases de Helm:"
    verbose_run "helm list --all-namespaces" "Listar todos los releases"
    
    echo "üîπ Repositorios de Helm:"
    verbose_run "helm repo list" "Listar repositorios"
    
    echo "üîπ Contenido del directorio del chart:"
    verbose_run "ls -la $HELM_CHART_DIR" "Contenido del directorio del chart"
    
    echo "üîπ Archivo Chart.yaml:"
    verbose_run "cat $HELM_CHART_DIR/Chart.yaml" "Contenido de Chart.yaml"
    
    echo -e "=============================="
    echo "üêõ [FIN] Modo debug"
    echo "==============================\n"
}

# Funci√≥n principal
main() {
    echo -e "\n=============================="
    echo "üöÄ [INICIO] blinkchamber-helm.sh"
    echo "=============================="
    verbose_env
    
    local args=($(parse_common_args "$@"))
    
    if [[ ${#args[@]} -eq 0 ]]; then
        echo "üîπ No se especificaron argumentos, mostrando ayuda..."
        show_helm_help
        exit 0
    fi
    
    local command="${args[0]}"
    echo "üîπ Comando solicitado: $command"
    shift # Remover comando de args
    
    case "$command" in
        install)
            local values_file=""
            local dry_run=false
            local wait=false
            local timeout="10m"
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --values)
                        values_file="$2"
                        shift 2
                        ;;
                    --dry-run)
                        dry_run=true
                        shift
                        ;;
                    --wait)
                        wait=true
                        shift
                        ;;
                    --timeout)
                        timeout="$2"
                        shift 2
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            install_chart "$values_file" "$dry_run" "$wait" "$timeout"
            ;;
        upgrade)
            local values_file=""
            local dry_run=false
            local wait=false
            local timeout="10m"
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --values)
                        values_file="$2"
                        shift 2
                        ;;
                    --dry-run)
                        dry_run=true
                        shift
                        ;;
                    --wait)
                        wait=true
                        shift
                        ;;
                    --timeout)
                        timeout="$2"
                        shift 2
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            upgrade_chart "$values_file" "$dry_run" "$wait" "$timeout"
            ;;
        uninstall)
            local dry_run=false
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --dry-run)
                        dry_run=true
                        shift
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            uninstall_chart "$dry_run"
            ;;
        status)
            show_release_status
            ;;
        values)
            show_current_values
            ;;
        lint)
            lint_chart
            ;;
        template)
            local values_file=""
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --values)
                        values_file="$2"
                        shift 2
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            template_chart "$values_file"
            ;;
        port-forward)
            local service_type="all"
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --all)
                        service_type="all"
                        shift
                        ;;
                    --vault)
                        service_type="vault"
                        shift
                        ;;
                    --zitadel)
                        service_type="zitadel"
                        shift
                        ;;
                    --mailu)
                        service_type="mailu"
                        shift
                        ;;
                    --grafana)
                        service_type="grafana"
                        shift
                        ;;
                    --prometheus)
                        service_type="prometheus"
                        shift
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            setup_helm_port_forwarding "$service_type"
            ;;
        logs)
            local component=""
            local follow=false
            local lines=50
            
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --component)
                        component="$2"
                        shift 2
                        ;;
                    --follow)
                        follow=true
                        shift
                        ;;
                    --lines)
                        lines="$2"
                        shift 2
                        ;;
                    *)
                        warning "Opci√≥n no reconocida: $1"
                        shift
                        ;;
                esac
            done
            
            show_helm_logs "$component" "$follow" "$lines"
            ;;
        debug)
            debug_mode
            ;;
        cleanup)
            cleanup_orphaned_resources
            ;;
        help|--help|-h)
            echo "üîπ Mostrando ayuda..."
            show_helm_help
            ;;
        *)
            echo "‚ùå Comando no reconocido: $command"
            echo ""
            show_helm_help
            exit 1
            ;;
    esac
    
    echo -e "=============================="
    echo "üöÄ [FIN] blinkchamber-helm.sh"
    echo "==============================\n"
}

# Ejecutar funci√≥n principal
main "$@" 