# config/blinkchamber.yaml - Configuración centralizada del proyecto

# Configuración general del proyecto
project:
  name: "blinkchamber"
  version: "2.0.0"
  description: "Sistema de gestión de identidad y secretos autocontenido con Vault"
  maintainer: "blinkchamber Team"

# Configuración del entorno
environment:
  name: "local"
  type: "development"
  debug: true
  verbose_logging: true

# Configuración de fases de despliegue
phases:
  enabled: true
  sequential: true
  wait_between_phases: true

  # Fase 1: Bootstrap básico
  phase1:
    name: "bootstrap"
    description: "Infraestructura básica"
    components:
      - "kubernetes-base"
      - "ingress"
      - "cert-manager"
      - "vault-infrastructure"
    terraform_path: "phases/01-bootstrap"
    timeout: 600

  # Fase 2: Inicialización de Vault
  phase2:
    name: "vault-init"
    description: "Inicialización automática de Vault"
    components:
      - "vault-init-job"
      - "kubernetes-auth"
      - "basic-policies"
    terraform_path: "phases/02-vault-init"
    timeout: 900
    depends_on: ["phase1"]

  # Fase 3: Configuración de secretos
  phase3:
    name: "secrets"
    description: "Configuración de secretos en Vault"
    components:
      - "kv-engine"
      - "application-secrets"
      - "vault-policies"
      - "k8s-roles"
    terraform_path: "phases/03-secrets"
    timeout: 300
    depends_on: ["phase2"]

  # Fase 4: Aplicaciones con Vault
  phase4:
    name: "applications"
    description: "Despliegue de aplicaciones con integración Vault"
    components:
      - "database-vault"
      - "identity-vault"
      - "storage-vault"
      - "monitoring-vault"
    terraform_path: "phases/04-applications"
    timeout: 900
    depends_on: ["phase3"]

# Configuración del cluster Kubernetes
cluster:
  name: "blinkchamber"
  context: "kind-blinkchamber"
  kubeconfig_path: "~/.kube/config"

# Configuración de red
network:
  domain_base: "blinkchamber.local"
  pod_subnet: "10.244.0.0/16"
  service_subnet: "10.96.0.0/12"

# Configuración de dominios
domains:
  base: "blinkchamber.local"
  vault: "vault.blinkchamber.local"
  grafana: "monitoring.blinkchamber.local"
  prometheus: "monitoring.blinkchamber.local"
  zitadel: "zitadel.blinkchamber.local"
  minio: "minio.blinkchamber.local"
  mailu: "mailu.blinkchamber.local"

# Configuración de seguridad
security:
  tls_enabled: true
  network_policies: true
  pod_security_standards: true
  ca_config:
    common_name: "blinkchamber CA"
    organization: "blinkchamber"
    country: "ES"
    validity_hours: 8760 # 1 año

# Configuración de componentes
components:
  # Componentes críticos (siempre se despliegan)
  essential:
    - name: "kubernetes-base"
      enabled: true
      priority: 1
    - name: "ingress"
      enabled: true
      priority: 2
    - name: "cert-manager"
      enabled: true
      priority: 3
    - name: "vault"
      enabled: true
      priority: 4
    - name: "database"
      enabled: true
      priority: 5
    - name: "identity"
      enabled: true
      priority: 6

  # Componentes opcionales (se pueden deshabilitar)
  optional:
    - name: "mail"
      enabled: true
      priority: 7
    - name: "storage"
      enabled: true
      priority: 8
    - name: "monitoring"
      enabled: false
      priority: 9

# Configuración específica por componente
ingress:
  chart_version: "4.8.3"
  node_ports:
    http: 30080
    https: 30443
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  enable_metrics: true

cert_manager:
  chart_version: "v1.13.3"
  install_crds: true
  resources:
    requests:
      cpu: "10m"
      memory: "32Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"

vault:
  chart_version: "0.26.1"
  image:
    repository: "hashicorp/vault"
    tag: "1.15.2"
  tls_enabled: false
  storage_size: "10Gi"
  high_availability:
    enabled: true
    replicas: 3

  # Configuración de bootstrap automático
  bootstrap:
    enabled: true
    auto_init: true
    auto_unseal:
      enabled: false
      method: "shamir" # shamir, transit, awskms, azurekeyvault, gcpckms
      config: {}

  # Configuración por entorno
  environment_config:
    development:
      auto_unseal:
        enabled: false
        method: "shamir"
      backup_enabled: false
      audit_enabled: true
    staging:
      auto_unseal:
        enabled: true
        method: "transit"
      backup_enabled: true
      audit_enabled: true
    production:
      auto_unseal:
        enabled: true
        method: "awskms"
        config:
          region: "us-west-2"
          # kms_key_id: configurar según el entorno
      backup_enabled: true
      audit_enabled: true

  # Configuración de políticas y roles
  auth_methods:
    kubernetes:
      enabled: true
      path: "kubernetes"

  policies:
    default_policies:
      - name: "blinkchamber-admin"
        description: "Política para administradores"
        rules: |
          path "secret/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          path "auth/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          path "sys/policies/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: "blinkchamber-readonly"
        description: "Política de solo lectura"
        rules: |
          path "secret/data/*" {
            capabilities = ["read"]
          }
          path "secret/metadata/*" {
            capabilities = ["read", "list"]
          }

  # Configuración de secretos iniciales
  initial_secrets:
    kv_engine:
      path: "secret"
      version: 2
      description: "KV v2 secret engine"

    # Plantillas de secretos por componente
    secret_templates:
      database:
        path: "secret/data/database"
        secrets:
          - name: "postgres"
            generate_password: true
            password_length: 32
          - name: "zitadel"
            generate_password: true
            password_length: 32
      identity:
        path: "secret/data/identity"
        secrets:
          - name: "zitadel"
            generate_password: true
            password_length: 16
      storage:
        path: "secret/data/storage"
        secrets:
          - name: "minio"
            generate_password: true
            password_length: 32
      monitoring:
        path: "secret/data/monitoring"
        secrets:
          - name: "grafana"
            generate_password: true
            password_length: 16

  resources:
    server:
      requests:
        cpu: "250m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"
    injector:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        cpu: "100m"
        memory: "128Mi"

database:
  chart_version: "13.2.24"
  postgres_config:
    version: "15"
    database: "blinkchamber"
    user: "postgres"
  storage_size: "20Gi"
  high_availability:
    enabled: false
    replicas: 1

  # Configuración de Vault Integration
  vault_integration:
    enabled: true
    service_account: "postgres"
    vault_role: "database-role"
    vault_secrets:
      - name: "postgres"
        path: "secret/data/database/postgres"
        template: |
          POSTGRES_USER={{ .Data.data.username }}
          POSTGRES_PASSWORD={{ .Data.data.password }}
          POSTGRES_DB={{ .Data.data.database }}
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "database-role"
      vault.hashicorp.com/agent-inject-secret-postgres: "secret/data/database/postgres"
      vault.hashicorp.com/agent-inject-template-postgres: |
        {{- with secret "secret/data/database/postgres" -}}
        export POSTGRES_USER="{{ .Data.data.username }}"
        export POSTGRES_PASSWORD="{{ .Data.data.password }}"
        export POSTGRES_DB="{{ .Data.data.database }}"
        {{- end }}

  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  # Configuration for PostgreSQL
  postgresql:
    auth:
      postgresPassword: "postgres123"
      database: "zitadel"
      username: "postgres"
      password: "postgres123"
    primary:
      resources:
        requests:
          cpu: "200m"
          memory: "256Mi"
        limits:
          cpu: "1000m"
          memory: "1Gi"
      persistence:
        enabled: true
        size: "10Gi"
        storageClass: "standard"
      service:
        type: "ClusterIP"
        port: 5432
    ingress:
      enabled: false

storage:
  chart_version: "5.0.14"
  storage_size: "50Gi"

  # Configuración de MinIO
  minio:
    version: "RELEASE.2023-11-20T22-40-07Z"
    console_port: 9001
    api_port: 9000

  # Buckets predefinidos
  buckets:
    - "terraform-state"
    - "vault-backups"
    - "grafana-data"
    - "application-data"

  # Configuración de Vault Integration
  vault_integration:
    enabled: true
    service_account: "minio"
    vault_role: "storage-role"
    vault_secrets:
      - name: "minio"
        path: "secret/data/storage/minio"
        template: |
          MINIO_ROOT_USER={{ .Data.data.access_key }}
          MINIO_ROOT_PASSWORD={{ .Data.data.secret_key }}
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "storage-role"

  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

identity:
  replicas: 1
  tls_enabled: false

  # Configuración de Zitadel
  zitadel:
    version: "v2.42.0"
    external_domain: "zitadel.blinkchamber.local"
    external_port: 80
    external_secure: false

  # Configuración de Vault Integration
  vault_integration:
    enabled: true
    service_account: "zitadel"
    vault_role: "identity-role"
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "identity-role"
      vault.hashicorp.com/agent-inject-secret-zitadel-app: "secret/data/identity/zitadel"
      vault.hashicorp.com/agent-inject-template-zitadel-app: |
        {{- with secret "secret/data/identity/zitadel" -}}
        export ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME="{{ .Data.data.admin_username }}"
        export ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD="{{ .Data.data.admin_password }}"
        export ZITADEL_EXTERNALSECURE="false"
        export ZITADEL_EXTERNALDOMAIN="zitadel.blinkchamber.local"
        export ZITADEL_EXTERNALPORT="80"
        export ZITADEL_MASTERKEY="{{ .Data.data.masterkey }}"
        {{- end }}
      vault.hashicorp.com/agent-inject-secret-zitadel-db: "secret/data/database/zitadel"
      vault.hashicorp.com/agent-inject-template-zitadel-db: |
        {{- with secret "secret/data/database/zitadel" -}}
        export ZITADEL_DATABASE_POSTGRES_HOST="{{ .Data.data.host }}"
        export ZITADEL_DATABASE_POSTGRES_PORT="{{ .Data.data.port }}"
        export ZITADEL_DATABASE_POSTGRES_DATABASE="{{ .Data.data.database }}"
        export ZITADEL_DATABASE_POSTGRES_USER_USERNAME="{{ .Data.data.username }}"
        export ZITADEL_DATABASE_POSTGRES_USER_PASSWORD="{{ .Data.data.password }}"
        export ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE="disable"
        {{- end }}

  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  # Configuration for Zitadel
  zitadel_config:
    config:
      masterkey: "masterkey123"
      admin:
        username: "admin"
        password: "admin123"
      database:
        postgres:
          host: "blinkchamber-postgresql"
          port: 5432
          database: "zitadel"
          username: "postgres"
          password: "postgres123"
          sslMode: "disable"
      smtp:
        host: "blinkchamber-mailu"
        port: 587
        user: "admin@blinkchamber.local"
        password: "admin123"
        fromAddress: "noreply@blinkchamber.local"
        tls: true
        startTLS: true
      externalSecure: false
      tls:
        enabled: false
    service:
      type: "ClusterIP"
      port: 8080
    ingress:
      enabled: true
      hosts:
        - host: "identity.blinkchamber.local"
          paths:
            - path: "/"
              pathType: "Prefix"
      tls:
        - secretName: "zitadel-tls"
          hosts:
            - "identity.blinkchamber.local"

# Configuración del sistema de correo
mail:
  # Sistema de correo por defecto según entorno
  system: "mailu"
  # Configuración de Mailu
  mailu:
    enabled: true
    web_port: 8025
    smtp_port: 1025
  # Configuración de Vault Integration
  vault_integration:
    enabled: true
    service_account: "mailu"
    vault_role: "mail-role"
    vault_secrets:
      - name: "mailu-config"
        path: "secret/data/mail/mailu"
        template: |
          MAILU_SECRET_KEY={{ .Data.data.secret_key }}
          MAILU_ADMIN_PASSWORD={{ .Data.data.admin_password }}
          MAILU_DB_PASSWORD={{ .Data.data.database_password }}
      - name: "database-config"
        path: "secret/data/database/mailu"
        template: |
          POSTGRES_HOST={{ .Data.data.host }}
          POSTGRES_PORT={{ .Data.data.port }}
          POSTGRES_DB={{ .Data.data.database }}
          POSTGRES_USER={{ .Data.data.username }}
          POSTGRES_PASSWORD={{ .Data.data.password }}
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "mail-role"
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Configuración de monitoreo y observabilidad
monitoring:
  enabled: true

  # Configuración de Grafana
  grafana:
    enabled: true
    version: "10.2.2"
    storage_size: "10Gi"

    # Configuración de Vault Integration
    vault_integration:
      enabled: true
      service_account: "grafana"
      vault_role: "monitoring-role"
      vault_secrets:
        - name: "grafana"
          path: "secret/data/monitoring/grafana"
          template: |
            GF_SECURITY_ADMIN_USER={{ .Data.data.admin_username }}
            GF_SECURITY_ADMIN_PASSWORD={{ .Data.data.admin_password }}
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "monitoring-role"

    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"

  # Configuración de Prometheus
  prometheus:
    enabled: false
    retention: "7d"

  # Configuración de Jaeger
  jaeger:
    enabled: false

# Configuración de puertos para port-forwarding
port_forwarding:
  vault: 8201
  database: 5432
  identity: 8080
  storage: 9000
  storage_console: 9001
  grafana: 3000
