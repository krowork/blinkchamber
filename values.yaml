# ========================================
# CONFIGURACIÓN GLOBAL
# ========================================
global:
  # Configuración de namespaces
  namespaces:
    infra: "infra"
    vault: "blinkchamber"
    database: "database"
    identity: "identity"
  
  # Configuración de TLS
  tls:
    enabled: true
    certManager:
      enabled: true
      clusterIssuer: "letsencrypt-prod"

# ========================================
# CERT-MANAGER
# ========================================
cert-manager:
  enabled: true
  installCRDs: true
  prometheus:
    enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# ========================================
# NGINX-INGRESS
# ========================================
ingress-nginx:
  enabled: true
  controller:
    service:
      type: NodePort
    ingressClassResource:
      name: nginx
      default: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    config:
      use-proxy-protocol: "false"
      proxy-real-ip-cidr: "0.0.0.0/0"

# ========================================
# VAULT
# ========================================
vault:
  enabled: true
  server:
    ha:
      enabled: true
      replicas: 3
    extraConfig: |
      listener "tcp" {
        address = "0.0.0.0:8200"
        cluster_address = "0.0.0.0:8201"
        tls_cert_file = "/vault/userconfig/tls/tls.crt"
        tls_key_file  = "/vault/userconfig/tls/tls.key"
        tls_disable   = false
      }
      storage "raft" {
        path    = "/vault/data"
        node_id = "vault-0"
      }
      api_addr = "https://vault.blinkchamber.svc:8200"
      cluster_addr = "https://vault.blinkchamber.svc:8201"
    extraVolumes:
      - type: secret
        name: vault-tls
        path: /vault/userconfig/tls
    extraVolumeMounts:
      - name: vault-tls
        mountPath: /vault/userconfig/tls
        readOnly: true
  injector:
    enabled: true
  ui:
    enabled: true
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 2Gi

# ========================================
# POSTGRESQL HA
# ========================================
postgresql-ha:
  enabled: true
  postgresql:
    replicaCount: 3
    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "postgres-role"
      vault.hashicorp.com/agent-inject-secret-POSTGRES_PASSWORD: "secret/data/postgres#password"
      vault.hashicorp.com/agent-inject-template-POSTGRES_PASSWORD: |
        {{- with secret "secret/data/postgres" -}}
        {{ .Data.data.password }}
        {{- end }}
    containerCommand:
      - /vault-entrypoint/postgresql-ha-vault-entrypoint.sh
    extraVolumeMounts:
      - name: vault-entrypoint
        mountPath: /vault-entrypoint
        readOnly: true
      - name: vault-secret
        mountPath: /vault/secrets
        readOnly: true
    extraVolumes:
      - name: vault-entrypoint
        configMap:
          name: postgresql-ha-vault-entrypoint
      - name: vault-secret
        emptyDir: {}
    extraEnvVars:
      - name: POSTGRES_PASSWORD_FILE
        value: "/vault/secrets/POSTGRES_PASSWORD"
    password: "" # No usar Kubernetes secret, solo Vault
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi

  pgpool:
    replicaCount: 2
    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "postgres-role"
      vault.hashicorp.com/agent-inject-secret-POSTGRES_PASSWORD: "secret/data/postgres#password"
      vault.hashicorp.com/agent-inject-template-POSTGRES_PASSWORD: |
        {{- with secret "secret/data/postgres" -}}
        {{ .Data.data.password }}
        {{- end }}
    extraEnvVars:
      - name: POSTGRES_PASSWORD_FILE
        value: "/vault/secrets/POSTGRES_PASSWORD"
    extraVolumeMounts:
      - name: vault-secret
        mountPath: /vault/secrets
        readOnly: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# ========================================
# REDIS HA
# ========================================
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    sentinel: true
  master:
    replicaCount: 3
    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "redis-role"
      vault.hashicorp.com/agent-inject-secret-REDIS_PASSWORD: "secret/data/redis#password"
      vault.hashicorp.com/agent-inject-template-REDIS_PASSWORD: |
        {{- with secret "secret/data/redis" -}}
        {{ .Data.data.password }}
        {{- end }}
    extraEnvVars:
      - name: REDIS_PASSWORD_FILE
        value: "/vault/secrets/REDIS_PASSWORD"
    extraVolumeMounts:
      - name: vault-secret
        mountPath: /vault/secrets
        readOnly: true
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      
  replica:
    replicaCount: 3
    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: "redis-role"
      vault.hashicorp.com/agent-inject-secret-REDIS_PASSWORD: "secret/data/redis#password"
      vault.hashicorp.com/agent-inject-template-REDIS_PASSWORD: |
        {{- with secret "secret/data/redis" -}}
        {{ .Data.data.password }}
        {{- end }}
    extraEnvVars:
      - name: REDIS_PASSWORD_FILE
        value: "/vault/secrets/REDIS_PASSWORD"
    extraVolumeMounts:
      - name: vault-secret
        mountPath: /vault/secrets
        readOnly: true
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      
  sentinel:
    enabled: true
    replicaCount: 3
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi

# ========================================
# ZITADEL
# ========================================
zitadel:
  enabled: true
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    hosts:
      - host: zitadel.tu-dominio.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []

  podAnnotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "zitadel-role"
    vault.hashicorp.com/agent-inject-secret-ZITADEL_DB_PASSWORD: "secret/data/zitadel/postgres#password"
    vault.hashicorp.com/agent-inject-template-ZITADEL_DB_PASSWORD: |
      {{- with secret "secret/data/zitadel/postgres" -}}
      {{ .Data.data.password }}
      {{- end }}
    vault.hashicorp.com/agent-inject-secret-VAULT_TOKEN: "secret/data/zitadel/vault#token"
    vault.hashicorp.com/agent-inject-template-VAULT_TOKEN: |
      {{- with secret "secret/data/zitadel/vault" -}}
      {{ .Data.data.token }}
      {{- end }}
    vault.hashicorp.com/agent-inject-secret-REDIS_PASSWORD: "secret/data/redis#password"
    vault.hashicorp.com/agent-inject-template-REDIS_PASSWORD: |
      {{- with secret "secret/data/redis" -}}
      {{ .Data.data.password }}
      {{- end }}
    vault.hashicorp.com/agent-inject-secret-SMTP_USER: "secret/data/mailu#admin_username"
    vault.hashicorp.com/agent-inject-template-SMTP_USER: |
      {{- with secret "secret/data/mailu" -}}
      {{ .Data.data.admin_username }}
      {{- end }}
    vault.hashicorp.com/agent-inject-secret-SMTP_PASSWORD: "secret/data/mailu#admin_password"
    vault.hashicorp.com/agent-inject-template-SMTP_PASSWORD: |
      {{- with secret "secret/data/mailu" -}}
      {{ .Data.data.admin_password }}
      {{- end }}

  config:
    database:
      postgres:
        host: postgresql-ha-postgresql.database.svc.cluster.local
        port: 5432
        database: zitadel
        user: zitadel
        password:
          valueFromFile: /vault/secrets/ZITADEL_DB_PASSWORD
    cache:
      redis:
        enabled: true
        host: redis-master.database.svc.cluster.local
        port: 6379
        password:
          valueFromFile: /vault/secrets/REDIS_PASSWORD
        database: 0
        poolSize: 10
        maxRetries: 3
        dialTimeout: 5s
        readTimeout: 3s
        writeTimeout: 3s
        poolTimeout: 4s
        idleTimeout: 5m
        maxConnAge: 30m
    
    # Event Streaming Configuration
    events:
      enabled: true
      redis:
        enabled: true
        host: redis-master.database.svc.cluster.local
        port: 6379
        password:
          valueFromFile: /vault/secrets/REDIS_PASSWORD
        database: 1  # Separate database for events
        poolSize: 20  # Larger pool for event publishing
        maxRetries: 5
        dialTimeout: 3s
        readTimeout: 2s
        writeTimeout: 2s
        poolTimeout: 3s
        idleTimeout: 10m
        maxConnAge: 1h
      publishing:
        enabled: true
        batchSize: 100
        batchTimeout: 1s
        maxRetries: 3
        retryDelay: 100ms
        compression: true
      types:
        - "user.created"
        - "user.updated"
        - "user.deleted"
        - "org.created"
        - "org.updated"
        - "org.deleted"
        - "project.created"
        - "project.updated"
        - "project.deleted"
        - "app.created"
        - "app.updated"
        - "app.deleted"
        - "auth.login"
        - "auth.logout"
        - "auth.failed"
        - "policy.created"
        - "policy.updated"
        - "policy.deleted"
        - "role.created"
        - "role.updated"
        - "role.deleted"
      queues:
        high_priority: "zitadel:events:high"
        normal_priority: "zitadel:events:normal"
        low_priority: "zitadel:events:low"
        dead_letter: "zitadel:events:dead_letter"
      performance:
        workerCount: 10
        maxConcurrentEvents: 1000
        eventBufferSize: 5000
        flushInterval: 500ms
        enableMetrics: true
    secrets:
      vault:
        enabled: true
        address: "https://vault.blinkchamber.svc:8200"
        token:
          valueFromFile: /vault/secrets/VAULT_TOKEN
    
    # Configuración de notificaciones por email
    notifications:
      email:
        enabled: true
        smtp:
          host: "blinkchamber-platform-mailu-front.blinkchamber.svc"
          port: 587
          user:
            valueFromFile: /vault/secrets/SMTP_USER
          password:
            valueFromFile: /vault/secrets/SMTP_PASSWORD
          startTLS: true
          from: "noreply@blinkchamber.local"
          replyTo: "support@blinkchamber.local"
    
    externalDomain: zitadel.tu-dominio.com
    tls:
      enabled: true
      secretName: zitadel-tls

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 2Gi

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80 