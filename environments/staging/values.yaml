# ========================================
# ENTORNO DE STAGING - SIMILAR A PRODUCCIÓN
# ========================================

# Heredar configuración base
import:
  - ../base/values.yaml

# ========================================
# OVERRIDES ESPECÍFICOS PARA STAGING
# ========================================

# Configuración global para staging
global:
  environment: "staging"
  domain: "staging.blinkchamber.com"
  
  # Configuración de TLS para staging (DESHABILITADO - staging usa HTTP según documentación)
  tls:
    enabled: false
    certManager:
      enabled: false

# ========================================
# VAULT - CONFIGURACIÓN PARA STAGING
# ========================================
vault:
  server:
    ha:
      replicas: 3  # Alta disponibilidad como producción
    extraConfig: |
      listener "tcp" {
        address = "0.0.0.0:8200"
        cluster_address = "0.0.0.0:8201"
        tls_disable = true  # Sin TLS para staging según documentación
      }
      storage "raft" {
        path    = "/vault/data"
        node_id = "vault-0"
      }
      api_addr = "http://vault.blinkchamber.svc:8200"
      cluster_addr = "http://vault.blinkchamber.svc:8201"
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 2Gi

# ========================================
# POSTGRESQL - CONFIGURACIÓN PARA STAGING
# ========================================
postgresql-ha:
  postgresql:
    primary:
      persistence:
        enabled: true
        size: 20Gi  # Tamaño similar a producción
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1
          memory: 2Gi
    readReplicas:
      replicaCount: 2  # Dos réplicas como producción
      persistence:
        enabled: true
        size: 20Gi
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1
          memory: 2Gi
    pgpool:
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi

# ========================================
# REDIS - CONFIGURACIÓN PARA STAGING
# ========================================
redis:
  architecture: replication
  master:
    persistence:
      enabled: true
      size: 20Gi  # Tamaño similar a producción
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
  replica:
    replicaCount: 2  # Dos réplicas como producción
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

# ========================================
# ZITADEL - CONFIGURACIÓN PARA STAGING
# ========================================
zitadel:
  ingress:
    hosts:
      - host: zitadel.staging.blinkchamber.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  zitadel:
    env:
      - name: ZITADEL_EXTERNALDOMAIN
        value: "zitadel.staging.blinkchamber.local"
      - name: ZITADEL_EXTERNALSECURE
        value: "false"  # HTTP para staging según documentación
    
    args:
      - "start-from-init"
      - "--masterkeyFile"
      - "/vault/secrets/masterkey"
      - "--tlsMode"
      - "disabled"  # Sin TLS para staging según documentación
    
    replicaCount: 2  # Dos réplicas como producción
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1
        memory: 2Gi
    persistence:
      enabled: true
      size: 20Gi  # Tamaño similar a producción

# ========================================
# NGINX-INGRESS - CONFIGURACIÓN PARA STAGING
# ========================================
ingress-nginx:
  controller:
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

# ========================================
# CERT-MANAGER - CONFIGURACIÓN PARA STAGING
# ========================================
cert-manager:
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi





# ========================================
# MAILU - CONFIGURACIÓN PARA STAGING
# ========================================
mailu:
  # Configuración específica para staging
  hostnames:
    - mail.staging.blinkchamber.com
  
  domain: "staging.blinkchamber.com"
  
  # Recursos similares a producción
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi 

# ========================================
# STACK DE OBSERVABILIDAD - STAGING
# ========================================
monitoring:
  enabled: true
  
  # ========================================
  # PROMETHEUS - STAGING
  # ========================================
  prometheus:
    enabled: true
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 10Gi
        storageClass: longhorn
    server:
      persistentVolume:
        enabled: true
        size: 30Gi
        storageClass: longhorn
      retention: 15d
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1
          memory: 2Gi
    pushgateway:
      enabled: true
      persistentVolume:
        enabled: true
        size: 5Gi
        storageClass: longhorn
    configmapReload:
      enabled: true
    kubeStateMetrics:
      enabled: true
    nodeExporter:
      enabled: true

  # ========================================
  # GRAFANA - STAGING
  # ========================================
  grafana:
    enabled: true
    adminPassword: "admin123"  # Cambiar en producción
    persistence:
      enabled: true
      size: 10Gi
      storageClass: longhorn
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # ========================================
  # LOKI - STAGING
  # ========================================
  loki:
    enabled: true
    loki:
      auth_enabled: false
      commonConfig:
        path_prefix: /var/loki
        replication_factor: 1
      storage:
        type: filesystem
        filesystem:
          chunks_directory: /var/loki/chunks
          rules_directory: /var/loki/rules
      schema_config:
        configs:
          - from: 2020-10-24
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h
      ruler:
        alertmanager_url: http://prometheus-alertmanager
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
      chunk_store_config:
        max_look_back_period: 0s
      table_manager:
        retention_deletes_enabled: false
        retention_period: 0s
    persistence:
      enabled: true
      size: 20Gi
      storageClass: longhorn
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # ========================================
  # PROMTAIL - STAGING
  # ========================================
  promtail:
    enabled: true
    config:
      server:
        http_listen_port: 9080
        grpc_listen_port: 0
      positions:
        filename: /tmp/positions.yaml
      clients:
        - url: http://loki:3100/loki/api/v1/push
      scrape_configs:
        - job_name: kubernetes-pods-name
          pipeline_stages:
            - docker: {}
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels:
                - __meta_kubernetes_pod_label_app
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_name
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_namespace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_pod_container_name
              target_label: container
            - source_labels:
                - __meta_kubernetes_pod_name
                - __meta_kubernetes_pod_container_name
                - __meta_kubernetes_pod_container_port_name
              action: replace
              regex: (.+);(.+);(.+)
              replacement: $1:$2:$3
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels:
                - __meta_kubernetes_namespace
              action: replace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_pod_name
              action: replace
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_container_name
              action: replace
              target_label: container
            - replacement: /var/log/pods/*$1/*.log
              separator: /
              source_labels:
                - __meta_kubernetes_pod_uid
                - __meta_kubernetes_pod_container_name
              target_label: __path__
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi 