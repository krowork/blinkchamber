# ========================================
# CONFIGURACIÓN BASE - COMÚN PARA TODOS LOS ENTORNOS
# ========================================
global:
  # Configuración de namespaces
  namespaces:
    infra: "infra"
    vault: "blinkchamber"
    database: "database"
    identity: "identity"
  
  # Configuración de TLS
  tls:
    enabled: true
    certManager:
      enabled: true
      clusterIssuer: "letsencrypt-prod"

# ========================================
# CERT-MANAGER - CONFIGURACIÓN BASE
# ========================================
cert-manager:
  enabled: true
  installCRDs: true
  prometheus:
    enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# ========================================
# NGINX-INGRESS - CONFIGURACIÓN BASE
# ========================================
ingress-nginx:
  enabled: true
  controller:
    service:
      type: NodePort
    ingressClassResource:
      name: nginx
      default: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    config:
      use-proxy-protocol: "false"
      proxy-real-ip-cidr: "0.0.0.0/0"

# ========================================
# LONGHORN - STORAGE DISTRIBUIDO PARA VIDEOS
# ========================================
longhorn:
  enabled: true
  persistence:
    defaultClass: true
    defaultClassReplicaCount: 3
  longhornManager:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  longhornDriver:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  longhornUI:
    enabled: true
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi

# ========================================
# VAULT - CONFIGURACIÓN BASE
# ========================================
vault:
  enabled: true
  server:
    ha:
      enabled: true
      replicas: 1  # Base: 1 replica, se sobrescribe por entorno
    extraConfig: |
      listener "tcp" {
        address = "0.0.0.0:8200"
        cluster_address = "0.0.0.0:8201"
        tls_cert_file = "/vault/userconfig/tls/tls.crt"
        tls_key_file  = "/vault/userconfig/tls/tls.key"
        tls_disable   = false
      }
      storage "raft" {
        path    = "/vault/data"
        node_id = "vault-0"
      }
      api_addr = "https://vault.blinkchamber.svc:8200"
      cluster_addr = "https://vault.blinkchamber.svc:8201"
    extraVolumes:
      - type: secret
        name: vault-tls
        path: /vault/userconfig/tls
    extraVolumeMounts:
      - name: vault-tls
        mountPath: /vault/userconfig/tls
        readOnly: true
  injector:
    enabled: true
  ui:
    enabled: true
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 2Gi

# ========================================
# POSTGRESQL - CONFIGURACIÓN BASE
# ========================================
postgresql-ha:
  enabled: true
  global:
    postgresql:
      auth:
        postgresPassword: ""
        database: "blinkchamber"
  postgresql:
    primary:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: "longhorn"
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
    readReplicas:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: "longhorn"
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
    pgpool:
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi

# ========================================
# REDIS - CONFIGURACIÓN BASE
# ========================================
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "longhorn"
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  replica:
    replicaCount: 1  # Base: 1 replica, se sobrescribe por entorno
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "longhorn"
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# ========================================
# ZITADEL - CONFIGURACIÓN BASE
# ========================================
zitadel:
  enabled: true
  
  # Anotaciones del pod para Vault injection
  podAnnotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "zitadel-role"
    vault.hashicorp.com/agent-inject-secret-masterkey: "secret/data/zitadel/config"
    vault.hashicorp.com/agent-inject-template-masterkey: |
      {{`{{- with secret "secret/data/zitadel/config" -}}
      {{ .Data.data.masterkey }}
      {{- end }}`}}
    vault.hashicorp.com/agent-inject-secret-db-password: "secret/data/zitadel/postgres"
    vault.hashicorp.com/agent-inject-template-db-password: |
      {{`{{- with secret "secret/data/zitadel/postgres" -}}
      {{ .Data.data.password }}
      {{- end }}`}}
  
  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    hosts:
      - host: zitadel.blinkchamber.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []

  # Configuración específica de ZITADEL
  zitadel:
    # Configuración del master key (requerido por chart oficial)
    masterkeySecretName: "zitadel-masterkey"
    
    # Comando y argumentos para inicialización
    command: ["zitadel"]
    args: 
      - "start-from-init"
      - "--masterkeyFile"
      - "/vault/secrets/masterkey"
      - "--tlsMode"
      - "disabled"
    
    # Variables de entorno para configuración
    env:
      - name: ZITADEL_LOG_LEVEL
        value: "info"
      - name: ZITADEL_DATABASE_POSTGRES_HOST
        value: "postgres.database.svc.cluster.local"
      - name: ZITADEL_DATABASE_POSTGRES_PORT
        value: "5432"
      - name: ZITADEL_DATABASE_POSTGRES_DATABASE
        value: "zitadel"
      - name: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
        value: "zitadel"
      - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD_FILE
        value: "/vault/secrets/db-password"
      - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE
        value: "disable"
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
        value: "zitadel"
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD_FILE
        value: "/vault/secrets/db-password"
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE
        value: "disable"
      - name: ZITADEL_EXTERNALSECURE
        value: "false"
      - name: ZITADEL_EXTERNALDOMAIN
        value: "zitadel.blinkchamber.local"
    
    # Configuración base de recursos (se sobrescribe por entorno)
    replicaCount: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1
        memory: 2Gi
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "longhorn"





# ========================================
# MAILU - SISTEMA DE EMAIL COMPLETO
# ========================================
mailu:
  enabled: true
  
  # Configuración básica
  hostnames:
    - mail.blinkchamber.local
  
  domain: "blinkchamber.local"
  
  # Configuración de secretos
  secretKey: ""  # Se generará automáticamente
  
  # Configuración de zona horaria
  timezone: "Europe/Madrid"
  
  # Cuenta inicial de administrador
  initialAccount:
    enabled: true
    username: "admin"
    domain: "blinkchamber.local"
    password: ""  # Se generará automáticamente
    mode: "create"
  
  # Configuración de base de datos
  global:
    database:
      roundcube:
        database: roundcube
        username: roundcube
        password: ""  # Se configurará desde Vault
  
  # Configuración de recursos
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi 

# ========================================
# ALMACENAMIENTO DE VIDEOS - CONFIGURACIÓN ESPECÍFICA
# ========================================
videoStorage:
  enabled: true
  
  # Configuración de Longhorn para videos
  longhorn:
    # StorageClass específico para videos con replicación
    storageClass:
      name: "longhorn-videos"
      replicaCount: 3  # 3 réplicas para alta disponibilidad
      numberOfReplicas: 3
      staleReplicaTimeout: 2880  # 48 horas
      fromBackup: ""
      
  # Configuración de volúmenes para videos
  volumes:
    # Volumen para videos subidos
    uploads:
      size: 100Gi  # Tamaño inicial, escalable
      storageClass: "longhorn-videos"
      accessMode: ReadWriteMany  # Múltiples pods pueden escribir
      
    # Volumen para videos procesados
    processed:
      size: 500Gi  # Más espacio para videos procesados
      storageClass: "longhorn-videos"
      accessMode: ReadWriteMany
      
    # Volumen para cache de transcodificación
    cache:
      size: 50Gi
      storageClass: "longhorn-videos"
      accessMode: ReadWriteMany
      
  # Configuración de recursos para procesamiento de videos
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 4Gi
      
  # Configuración de retención
  retention:
    days: 365  # Retener videos por 1 año
    maxSize: "10Ti"  # Máximo 10TB de videos
    
  # Configuración de compresión
  compression:
    enabled: true
    quality: "medium"  # balanced, high, low
    format: "mp4"  # mp4, webm, avi 

# ========================================
# STACK DE OBSERVABILIDAD - CONFIGURACIÓN BASE
# ========================================
monitoring:
  enabled: true
  
  # ========================================
  # PROMETHEUS - CONFIGURACIÓN BASE
  # ========================================
  prometheus:
    enabled: true
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 5Gi
        storageClass: longhorn
    server:
      persistentVolume:
        enabled: true
        size: 20Gi
        storageClass: longhorn
      retention: 15d
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          cpu: 500m
          memory: 1Gi
    pushgateway:
      enabled: true
      persistentVolume:
        enabled: true
        size: 2Gi
        storageClass: longhorn
    configmapReload:
      enabled: true
    kubeStateMetrics:
      enabled: true
    nodeExporter:
      enabled: true

  # ========================================
  # GRAFANA - CONFIGURACIÓN BASE
  # ========================================
  grafana:
    enabled: true
    adminPassword: "admin123"  # Cambiar en producción
    persistence:
      enabled: true
      size: 5Gi
      storageClass: longhorn
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi

  # ========================================
  # LOKI - CONFIGURACIÓN BASE
  # ========================================
  loki:
    enabled: true
    loki:
      auth_enabled: false
      commonConfig:
        path_prefix: /var/loki
        replication_factor: 1
      storage:
        type: filesystem
        filesystem:
          chunks_directory: /var/loki/chunks
          rules_directory: /var/loki/rules
      schema_config:
        configs:
          - from: 2020-10-24
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h
      ruler:
        alertmanager_url: http://prometheus-alertmanager
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
      chunk_store_config:
        max_look_back_period: 0s
      table_manager:
        retention_deletes_enabled: false
        retention_period: 0s
    persistence:
      enabled: true
      size: 10Gi
      storageClass: longhorn
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi

  # ========================================
  # PROMTAIL - CONFIGURACIÓN BASE
  # ========================================
  promtail:
    enabled: true
    config:
      server:
        http_listen_port: 9080
        grpc_listen_port: 0
      positions:
        filename: /tmp/positions.yaml
      clients:
        - url: http://loki:3100/loki/api/v1/push
      scrape_configs:
        - job_name: kubernetes-pods-name
          pipeline_stages:
            - docker: {}
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels:
                - __meta_kubernetes_pod_label_app
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_label_app_kubernetes_io_name
              target_label: app
            - source_labels:
                - __meta_kubernetes_pod_name
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_namespace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_pod_container_name
              target_label: container
            - source_labels:
                - __meta_kubernetes_pod_name
                - __meta_kubernetes_pod_container_name
                - __meta_kubernetes_pod_container_port_name
              action: replace
              regex: (.+);(.+);(.+)
              replacement: $1:$2:$3
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels:
                - __meta_kubernetes_namespace
              action: replace
              target_label: namespace
            - source_labels:
                - __meta_kubernetes_pod_name
              action: replace
              target_label: pod
            - source_labels:
                - __meta_kubernetes_pod_container_name
              action: replace
              target_label: container
            - replacement: /var/log/pods/*$1/*.log
              separator: /
              source_labels:
                - __meta_kubernetes_pod_uid
                - __meta_kubernetes_pod_container_name
              target_label: __path__
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi 